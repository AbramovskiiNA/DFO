#include "Mheader.h"
#include "MyForm.h"

using namespace std;

ofstream outfilestr("out.txt");

const double TwoPi = 6.283;

// Прорежённые массивы
int massbin[18] = {0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536 };

int mass1[423] = { -32767,-32766,-32764,-32760,-32752,-32736,-32704,-32640,-32512,-32256,-31744,-30720,-28672,-24576,-20480,-18432,-17408,-16896,-16640,-16512,-16448,-16416,-16400,-16392,-16388,-16386,-16385,-16384,-16383,-16382,-16380,-16376,-16368,-16352,-16320,-16256,-16128,-15872,-15360,-14336,-12288,-10240,-9216,
-8704,-8448,-8320,-8256,-8224,-8208,-8200,-8196,-8194,-8193,-8192,-8191,-8190,-8188,-8184,-8176,-8160,-8128,-8064,-7936,-7680,-7168,-6144,-5120,-4608,-4352,-4224,-4160,-4128,-4112,-4104,-4100,-4098,-4097,-4096,-4095,-4094,-4092,-4088,-4080,-4064,-4032,-3968,-3840,-3584,-3072,-2560,-2304,-2176,-2112,-2080,-2064,-2056,-2052,-2050,-2049,-2048,-2047,-2046,-2044,-2040,-2032,-2016,-1984,-1920,-1792,-1536,-1280,-1152,-1088,-1056,-1040,-1032,-1028,-1026,-1025,-1024,-1023,-1022,-1020,-1016,-1008,-992,-960,-896,-768,-640,-576,-544,-528,-520,-516,-514,-513,-512,-511,-510,-508,-504,-496,-480,-448,-384,-320,-288,-272,-264,-260,-258,-257,-256,-255,-254,-252,-248,-240,-224,-192,-160,-144,-136,-132,-130,-129,-128,-127,-126,-124,-120,-112,-96,-80,-72,-68,-66,-65,-64,-63,-62,-60,-56,-48,-40,-36,-34,-33,-32,-31,-30,-28,-24,-20,-18,-17,-16,-15,-14,-12,-10,-9,-8,-7,-6,-5,-4,-3,-2,0,1,2,3,4,5,6,7,8,9,10,12,14,15,16,17,18,20,24,28,30,31,32,33,34,36,
40,48,56,60,62,63,64,65,66,68,72,80,96,112,120,124,126,127,128,129,130,132,136,144,160,192,224,240,248,252,254,255,256,257,258,260,264,272,288,320,384,448,480,496,504,508,510,511,512,513,514,516,520,528,544,576,640,768,896,960,992,1008,1016,1020,1022,1023,1024,1025,1026,1028,1032,1040,1056,1088,1152,1280,1536,1792,1920,1984,2016,2032,2040,2044,2046,2047,2048,2049,2050,2052,2056,2064,2080,2112,2176,2304,2560,3072,3584,3840,3968,4032,4064,4080,4088,4092,4094,4095,4096,4097,4098,4100,4104,4112,4128,4160,4224,4352,4608,5120,6144,7168,7680,7936,8064,8128,8160,8176,8184,8188,8190,8191,8192,8193,8194,8196,8200,8208,8224,8256,8320,8448,8704,9216,10240,12288,14336,15360,15872,16128,16256,16320,16352,16368,16376,16380,16382,16383,16384,16385,16386,16388,16392,16400,16416,16448,16512,16640,16896,17408,18432,20480,24576,28672,30720,31744,32256,32512,32640,32704,32736,32752,32760,32764,32766,
32767 };

int mass2[3024] = { -32767,-32766,-32765,-32764,-32763,-32762,-32761,-32760,-32759,-32758,-32756,-32754,-32753,-32752,-32751,-32750,-32748,-32744,-32740,-32738,-32737,-32736,-32735,-32734,-32732,-32728
,-32720,-32712,-32708,-32706,-32705,-32704,-32703,-32702,-32700,-32696,-32688,-32672,-32656,-32648,-32644,-32642,-32641,-32640,-32639,-32638,-32636,-32632,-32624,-32608,-32576,-32544,-32528,-32520,
-32516,-32514,-32513,-32512,-32511,-32510,-32508,-32504,-32496,-32480,-32448,-32384,-32320,-32288,-32272,-32264,-32260,-32258,-32257,-32256,-32255,-32254,-32252,-32248,-32240,-32224,-32192,-32128,
-32000,-31872,-31808,-31776,-31760,-31752,-31748,-31746,-31745,-31744,-31743,-31742,-31740,-31736,-31728,-31712,-31680,-31616,-31488,-31232,-30976,-30848,-30784,-30752,-30736,-30728,-30724,-30722,-30721,-30720,-30719,-30718,-30716,-30712,-30704,-30688,-30656,-30592,-30464,-30208,-29696,-29184,-28928,-28800,-28736,-28704,-28688,-28680,-28676,-28674,-28673,-28672,-28671,-28670,-28668,-28664,-28656,-28640,-28608,-28544,-28416,-28160,-27648,-26624,-25600,-25088,-24832,-24704,-24640,-24608,-24592,-24584,-24580,-24578,-24577,-24576,-24575,-24574,-24572,-24568,-24560,-24544,-24512,-24448,-24320,-24064,-23552,-22528,-21504,-20992,-20736,-20608,-20544,-20512,-20496,-20488,-20484,-20482,-20481,-20480,-20479,-20478,-20476,-20472,-20464,-20448,-20416,-20352,-20224,-19968,-19456,-18944,-18688,-18560,-18496,-18464,-18448,-18440,-18436,-18434,-18433,-18432,-18431,-18430,-18428,-18424,-18416,-18400,-18368,-18304,-18176,-17920,-17664,-17536,-17472,-17440,-17424,-17416,-17412,-17410,
-17409,-17408,-17407,-17406,-17404,-17400,-17392,-17376,-17344,-17280,-17152,-17024,-16960,-16928,-16912,-16904,-16900,-16898,-16897,-16896,-16895,-16894,-16892,-16888,-16880,-16864,-16832,-16768,-16704,-16672,-16656,-16648,-16644,-16642,-16641,-16640,-16639,-16638,-16636,-16632,-16624,-16608,-16576,-16544,-16528,-16520,-16516,-16514,-16513,-16512,-16511,-16510,-16508,-16504,-16496,-16480,-16464,-16456,-16452,-16450,-16449,-16448,-16447,-16446,-16444,-16440,-16432,-16424,-16420,-16418,-16417,-16416,-16415,-16414,-16412,-16408,-16404,-16402,-16401,-16400,-16399,-16398,-16396,-16394,-16393,-16392,-16391,-16390,-16389,-16388,-16387,-16386,-16385,-16384,-16383,-16382,-16381,-16380,-16379,-16378,-16377,-16376,-16375,-16374,-16372,-16370,-16369,-16368,-16367,-16366,-16364,-16360,-16356,-16354,-16353,-16352,-16351,-16350,-16348,-16344,-16336,-16328,-16324,-16322,-16321,-16320,-16319,-16318,-16316,-16312,-16304,-16288,-16272,-16264,-16260,-16258,-16257,-16256,-16255,-16254,-16252,-16248,-16240,-16224,-16192,-16160,-16144,-16136,-16132,-16130,-16129,-16128,-16127,-16126,-16124,-16120,-16112,-16096,-16064,-16000,-15936,-15904,-15888,-15880,-15876,-15874,-15873,-15872,-15871,-15870,-15868,-15864,-15856,-15840,-15808,-15744,-15616,-15488,-15424,-15392,-15376,-15368,-15364,-15362,-15361,-15360,-15359,-15358,-15356,-15352,-15344,-15328,-15296,-15232,-15104,-14848,-14592,-14464,-14400,-14368,-14352,-14344,-14340,-14338,-14337,-14336,-14335,-14334,-14332,-14328,-14320,-14304,-14272,-14208,-14080,-13824,-13312,-12800,-12544,-12416,-12352,-12320,-12304,-12296,-12292,-12290,-12289,-12288,-12287,-12286,-12284,-12280,-12272,-12256,-12224,-12160,-12032,-11776,-11264,-10752,-10496,-10368,-10304,-10272,-10256,-10248,-10244,-10242,-10241,-10240,-10239,-10238,
-10236,-10232,-10224,-10208,-10176,-10112,-9984,-9728,-9472,-9344,-9280,-9248,-9232,-9224,-9220,-9218,-9217,-9216,-9215,-9214,-9212,-9208,-9200,-9184,-9152,-9088,-8960,-8832,-8768,-8736,-8720,-8712,
-8708,-8706,-8705,-8704,-8703,-8702,-8700,-8696,-8688,-8672,-8640,-8576,-8512,-8480,-8464,-8456,-8452,-8450,-8449,-8448,-8447,-8446,-8444,-8440,-8432,-8416,-8384,-8352,-8336,-8328,-8324,-8322,-8321,
-8320,-8319,-8318,-8316,-8312,-8304,-8288,-8272,-8264,-8260,-8258,-8257,-8256,-8255,-8254,-8252,-8248,-8240,-8232,-8228,-8226,-8225,-8224,-8223,-8222,-8220,-8216,-8212,-8210,-8209,-8208,-8207,-8206,
-8204,-8202,-8201,-8200,-8199,-8198,-8197,-8196,-8195,-8194,-8193,-8192,-8191,-8190,-8189,-8188,-8187,-8186,-8185,-8184,-8183,-8182,-8180,-8178,-8177,-8176,-8175,-8174,-8172,-8168,-8164,-8162,-8161,
160,-8159,-8158,-8156,-8152,-8144,-8136,-8132,-8130,-8129,-8128,-8127,-8126,-8124,-8120,-8112,-8096,-8080,-8072,-8068,-8066,-8065,-8064,-8063,-8062,-8060,-8056,-8048,-8032,-8000,-7968,-7952,-7944,-7940,-7938,-7937,-7936,-7935,-7934,-7932,-7928,-7920,-7904,-7872,-7808,-7744,-7712,-7696,-7688,-7684,-7682,-7681,-7680,-7679,-7678,-7676,-7672,-7664,-7648,-7616,-7552,-7424,-7296,-7232,-7200,-7184,
-7176,-7172,-7170,-7169,-7168,-7167,-7166,-7164,-7160,-7152,-7136,-7104,-7040,-6912,-6656,-6400,-6272,-6208,-6176,-6160,-6152,-6148,-6146,-6145,-6144,-6143,-6142,-6140,-6136,-6128,-6112,-6080,-6016,
-249,-248,-247,-246,-244,-242,-241,-240,-239,-238,-236,-232,-228,-226,-225,-224,-223,-222,-220,-216,-208,-200,-196,-194,-193,-192,-191,-190,-188,-184,-176,-168,-164,-162,-161,-160,-159,-158,-156,-152,-148,-146,
-145,-144,-143,-142,-140,-138,-137,-136,-135,-134,-133,-132,-131,-130,-129,-128,-127,-126,-125,-124,-123,-122,-121,-120,-119,-118,-116,-114,-113,-112,-111,-110,-108,-104,-100,-98,-97,-96,-95,-94,-92,-88,-84,-82,
-81,-80,-79,-78,-76,-74,-73,-72,-71,-70,-69,-68,-67,-66,-65,-64,-63,-62,-61,-60,-59,-58,-57,-56,-55,-54,-52,-50,-49,-48,-47,-46,-44,-42,-41,-40,-39,-38,-37,-36,-35,-34,-33,-32,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,
-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,46,47,48,49,50,52,54,55,
56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,78,79,80,81,82,84,88,92,94,95,96,97,98,100,104,108,110,111,112,113,114,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,148,152,156,158,159,160,161,162,164,168,176,184,188,190,191,192,193,194,196,200,208,216,220,222,223,224,225,226,228,232,236,238,239,240,
241,242,244,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,268,270,271,272,273,274,276,280,284,286,287,288,289,290,16130,16132,16136,16144,16160,16192,16224,16240,16248,16252,16254,16255,16256,16257,16258,16260,16264,16272,16288,16304,16312,16316,16318,16319,16320,16321,16322,16324,16328,16336,16344,16348,16350,16351,16352,16353,16354,16356,16360,
16364,16366,16367,16368,16369,16370,16372,16374,16375,16376,16377,16378,16379,16380,16381,16382,16383,16384,16385,16386,16387,16388,16389,16390,16391,16392,16393,16394,16396,16398,16399,16400,16401,16402,16404,16408,16412,16414,16415,16416,16417,16418,16420,16424,16432,16440,16444,16446,16447,16448,16449,16450,16452,16456,16464,16480,16496,16504,16508,16510,16511,16512,16513,16514,16516,16520,16528,16544,16576,16608,16624,16632,16636,16638,16639,16640,16641,16642,32737,32738,32740,32744,32748,32750,32751,32752,32753,32754,32756,32758,32759,
32760,32761,32762,32763,32764,32765,32766,32767 };

// Расчёт времени вычисления
double time_calculations(int *coef, int *blm)
{
	// Чтение данных платформ
	ifstream infilestrp1("current_platform.txt");

	double addt, mult, movt;
	double addtbin, multbin, movtbin;
	double addt1, mult1, movt1;
	double addt2, mult2, movt2;

	infilestrp1 >> addt >> mult >> movt;
	infilestrp1 >> addtbin >> multbin >> movtbin;
	infilestrp1 >> addt1 >> mult1 >> movt1;
	infilestrp1 >> addt2 >> mult2 >> movt2;

	// Проверка на совпадения
	double time = 4 * addt + 5 * mult + movt;
	int matches_arr[6] = {};
	for (int i = 0; i < 6; i++)
	{
		for (int j = 0; j < 17; j++)
		{
			if (coef[i] == massbin[j])
			{
				time = time - addt + addtbin;
				time = time - mult + multbin;
				time = time - movt + movtbin;
				matches_arr[i] = 1;
			}
		}

		for (int j = 0; j < 422; j++)
		{
			if ((coef[i] == mass1[j]) && (matches_arr[i] = 0))
			{
				time = time - addt + addt1;
				time = time - mult + mult1;
				time = time - movt + movt1;
				matches_arr[i] = 1;
			}
		}

		for (int j = 0; j < 3023; j++)
		{
			if ((coef[i] == mass2[j]) && (matches_arr[i] = 0))
			{
				time = time - addt + addt2;
				time = time - mult + mult2;
				time = time - movt + movt2;
				matches_arr[i] = 1;
			}
		}
	}
	return time;
}

// Расчёт ЧХ
double FR_Calculation(int *coef, double *pf1, double *pf2, double *p_amp_arr, double *p_pha_arr, double *pwm)
{
	double a0 = coef[0];
	double a1 = coef[1];
	double a2 = coef[2];
	double b0 = coef[3];
	double b1 = coef[4];
	double b2 = coef[5];

	double df = (*pf2 - *pf1) / 100;
	double dw = df * TwoPi;
	double w;

	complex< double > j(0, 1);
	complex< double > pf;
	complex< double > z;

	for (int i = 0; i < 100; i++)
	{
		w = dw * (i + 1);

		z = cos(w) + j*sin(w);

		pf = (b0 + b1 / z + b2 / (z*z)) / (a0 + a1 / z + a2 / (z*z));

		p_amp_arr[i] = abs(pf);
		p_pha_arr[i] = arg(pf);
		pwm[i] = w;
	}

	return 0;
}

// Измерение ЧХ
double FR_measuring(int *coef, double *pf1, double *pf2, double *p_amp_arr, double *p_pha_arr, double *pwm, double *x, double *y)
{
	double a0 = coef[0];
	double a1 = coef[1];
	double a2 = coef[2];
	double b0 = coef[3];
	double b1 = coef[4];
	double b2 = coef[5];

	double df = (*pf2 - *pf1) / 100;
	double dw = df * TwoPi;
	double w;

	double ymin = 0;
	double ymax = 0;
	double xmin = 0;
	int nminy;
	int nminx;

	for (int i = 0; i < 100; i++)
	{
		w = dw * (i + 1);

		x[0] = sin(0);
		y[0] = 0;
		x[1] = sin(w * 1 / 100);
		y[1] = 0;
		x[2] = sin(w * 2 / 100);
		y[2] = 0;
		for (int n = 3; n < 500; n++)
		{
			x[n] = sin(w*n);
			y[n] = (b0*x[n] + b1*x[n - 1] + b2*x[n - 2] - a1*y[n - 1] - a2*y[n - 2]) / a0;
		}

		ymin = 0;
		ymax = 0;

		for (int n = 100; n < 500; n++)
		{
			if (y[n] < ymin)
			{
				ymin = y[n];
				nminy = n;
			}
			if (y[n] > ymax)
			{
				ymax = y[n];
			}
			if (x[n] < xmin)
			{
				xmin = x[n];
				nminx = n;
			}
		}

		int dN = nminy - nminx;
		double T = TwoPi / w;
		double dn = dN;
		while (abs(dn) > T)
		{
			if (dn < (0 - T))
				dn += T;
			if (dn > T)
				dn -= T;
		}

		p_amp_arr[i] = (ymax - ymin) / 2;
		p_pha_arr[i] = dn;
		pwm[i] = w;
	}
	return 0;
}

// Ответ на синус
double sin_response(int *coef, double *pw, double *x, double *y, double *p_amp_arr, double *p_pha_arr)
{
	double a0 = coef[0];
	double a1 = coef[1];
	double a2 = coef[2];
	double b0 = coef[3];
	double b1 = coef[4];
	double b2 = coef[5];

	double w = *pw;
	
	double ymin = 0;
	double ymax = 0;
	double xmin = 0;
	int nminy;
	int nminx;

	x[0] = sin(0);
	y[0] = 0;
	x[1] = sin(w * 1 / 100);
	y[1] = 0;
	x[2] = sin(w * 2 / 100);
	y[2] = 0;

	for (int n = 3; n < 500; n++)
	{
		x[n] = sin(w*n);
		y[n] = (b0*x[n] + b1*x[n - 1] + b2*x[n - 2] - a1*y[n - 1] - a2*y[n - 2]) / a0;
	}

	ymin = 0;
	ymax = 0;

	for (int n = 100; n < 500; n++)
	{
		if (y[n] < ymin)
		{
			ymin = y[n];
			nminy = n;
		}
		if (y[n] > ymax)
		{
			ymax = y[n];
		}
		if (x[n] < xmin)
		{
			xmin = x[n];
			nminx = n;
		}
	}

	int dN = nminy - nminx;
	double T = TwoPi / w;
	double dn = dN;
	while (abs(dn) > (1*T))
		if (dn < (-1)*T) dn += T;
		else if (dn > T) dn -= T;

	double dphi = dn * w;

	*p_amp_arr = (ymax - ymin) / 2;
	*p_pha_arr = -dphi;
	/*outfilestr << dphi << endl;*/

	SYSTEMTIME st;
	int t1, t2, dt;
	GetLocalTime(&st);
	t1 = st.wMilliseconds;
	do
	{
		GetLocalTime(&st);
		t2 = st.wMilliseconds;
		dt = abs(t2 - t1);
	} while (dt<5);
	
	return 0;
}

// Проверка на совпаления коэффициентов и элементов + нахождение ближайших + расчёт времени отклика
double matches_time(int *coef, int *nearest_arr)
{
	// Чтение данных платформ
	ifstream infilestrp1("current_platform.txt");

	double addt, mult, movt;
	double addtbin, multbin, movtbin;
	double addt1, mult1, movt1;
	double addt2, mult2, movt2;

	infilestrp1 >> addt >> mult >> movt;
	infilestrp1 >> addtbin >> multbin >> movtbin;
	infilestrp1 >> addt1 >> mult1 >> movt1;
	infilestrp1 >> addt2 >> mult2 >> movt2;

	// Нахождение ближайших
	double time = 4 * addt + 5 * mult + movt;
	int min_difference;
	int matches_arr[6] = {};

	for (int i = 0; i < 6; i++)
	{
		min_difference = 131074;
		for (int j = 0; j < 18; j++)
		{
			if (abs(coef[i] - massbin[j]) < min_difference)
			{
				min_difference = abs(coef[i] - massbin[j]);
				nearest_arr[i*3] = massbin[j];
			}
			if (min_difference == 0)
			{
				time = time - addt + addtbin;
				time = time - mult + multbin;
				time = time - movt + movtbin;
				matches_arr[i] = 3;
			}
		}

		min_difference = 131074;
		for (int j = 0; j < 423; j++)
		{
			if (abs(coef[i] - mass1[j]) < min_difference)
			{
				min_difference = abs(coef[i] - mass1[j]);
				nearest_arr[i*3+1] = mass1[j];
			}
			if ((min_difference == 0) && (matches_arr[i] == 0))
			{
				time = time - addt + addt1;
				time = time - mult + mult1;
				time = time - movt + movt1;
				matches_arr[i] = 2;
			}
		}

		min_difference = 131074;
		for (int j = 0; j < 3024; j++)
		{
			if (abs(coef[i] - mass2[j]) < min_difference)
			{
				min_difference = abs(coef[i] - mass2[j]);
				nearest_arr[i*3+2] = mass2[j];
			}
			if ((min_difference == 0) && (matches_arr[i] == 0))
			{
				time = time - addt + addt2;
				time = time - mult + mult2;
				time = time - movt + movt2;
				matches_arr[i] = 1;
			}
		}
	}

	for (int i = 0; i < 6; i++)
	{
		outfilestr << matches_arr[i] << " | " ;
	}
	outfilestr << endl;
	for (int i = 0; i < 17; i++)
	{
		outfilestr << nearest_arr[i] << " | " ;
	}
	outfilestr << endl;

	return time;
}